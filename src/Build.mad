#iftarget js

import type { Wish } from "Wish"
import { bad, mapRej, parallel } from "Wish"
import { Just, Nothing } from "Maybe"
import { nth, dropLast, intercalate, last, reduce } from "List"
import { split } from "String"
import type { IOUtils } from "@/IOUtils"

alias InputOutput = { input :: String, output :: String }

export alias Config = {
  madlib               :: InputOutput,
  styles               :: InputOutput,
  html                 :: InputOutput,
  sassExecutablePath   :: String,
  documentationDotJson :: InputOutput
}

MADDOC_PACKAGE_FOLDER :: String
MADDOC_PACKAGE_FOLDER = "MadDoc"

MADLIB_MODULES_FOLDER :: String
MADLIB_MODULES_FOLDER = "madlib_modules"

JS_BUNDLE_PATH :: String
JS_BUNDLE_PATH = ".docs/bundle.js"

CSS_TARGET_PATH :: String
CSS_TARGET_PATH = ".docs/styles/main.css"

HTML_TARGET_PATH :: String
HTML_TARGET_PATH = ".docs/index.html"


parentPath :: Integer -> String -> String
parentPath = (levelsUp) => pipe(
  split("/"),
  dropLast(levelsUp),
  intercalate(["/"]),
  reduce(mconcat, "")
)

pathToDocument :: IOUtils -> Wish String String
export pathToDocument = pipe(
  .args,
  nth(1),
  where {
    Just(path) =>
      of(path)

    Nothing   =>
      bad("You must give a path to the .mad files to document!")
  }
)


madDocRootPath :: IOUtils -> Wish String String
export madDocRootPath = (ioUtils) => map(
  (path) => pipe(
    parentPath(3),
    split("/"),
    last,
    where {
      Just("madlib_modules") =>
        `${parentPath(3, path)}/${MADDOC_PACKAGE_FOLDER}`

      _ =>
        `${parentPath(3, path)}/${MADLIB_MODULES_FOLDER}/${MADDOC_PACKAGE_FOLDER}`
    }
  )(path),
  ioUtils.getExecutablePath
)

sassExecutablePath :: IOUtils -> Wish String String
export sassExecutablePath = (ioUtils) => map(
  (rootPath) => `${parentPath(2, rootPath)}/node_modules/.bin/sass`,
  madDocRootPath(ioUtils)
)

madDocSrcPath :: IOUtils -> Wish String String
export madDocSrcPath = (ioUtils) => map(
  mconcat($, "/src"),
  madDocRootPath(ioUtils)
)

documentationTargetPath :: IOUtils -> Wish String String
export documentationTargetPath = (ioUtils) => map(
  mconcat($, "/documentation.json"),
  madDocSrcPath(ioUtils)
)

madDocMainPath :: IOUtils -> Wish String String
export madDocMainPath = (ioUtils) => map(
  mconcat($, "/Main.mad"),
  madDocSrcPath(ioUtils)
)

sassPath :: IOUtils -> Wish String String
export sassPath = (ioUtils) => map(
  mconcat($, "/styles/main.scss"),
  madDocSrcPath(ioUtils)
)

htmlSourcePath :: IOUtils -> Wish String String
export htmlSourcePath = (ioUtils) => map(
  mconcat($, "/index.html"),
  madDocSrcPath(ioUtils)
)


generateConfiguration :: IOUtils -> Wish String Config
export generateConfiguration = (ioUtils) => pipe(
  parallel,
  map(where {
    [madMain, sassMain, htmlIndex, sassBin, docInput, docOutput] => 
      {
        madlib: { input: madMain, output: JS_BUNDLE_PATH },
        styles: { input: sassMain, output: CSS_TARGET_PATH },
        html: { input: htmlIndex, output: HTML_TARGET_PATH },
        sassExecutablePath: sassBin,
        documentationDotJson: { input: docInput, output: docOutput }
      }
  })
)([
  madDocMainPath(ioUtils),
  sassPath(ioUtils),
  htmlSourcePath(ioUtils),
  sassExecutablePath(ioUtils),
  pathToDocument(ioUtils),
  documentationTargetPath(ioUtils)
])


generateJson :: IOUtils -> Config -> Wish String String
export generateJson = (ioUtils, config) => pipe(
  (c) => `madlib doc -i ${c.documentationDotJson.input} > ${c.documentationDotJson.output}`,
  ioUtils.exec,
  mapRej(.stderr),
  mapRej((err) =>
  `An error occured while generating the docs, here is the error from madlib:\n${err}`
  ),
  map((_) => `Documentation built and saved in '${config.documentationDotJson.output}'`)
)(config)


buildBundle :: IOUtils -> Config -> Wish String String
export buildBundle = (ioUtils) => pipe(
  (c) => `madlib compile -i ${c.madlib.input} --target browser --bundle -o ${c.madlib.output}`,
  ioUtils.exec,
  mapRej(.stderr),
  map(.stdout)
)

buildSass :: IOUtils -> Config -> Wish String String
export buildSass = (ioUtils) => pipe(
  (c) => ioUtils.exec(`${c.sassExecutablePath} ${c.styles.input} ${c.styles.output}`),
  mapRej(.stderr),
  map(.stdout)
)

copyHtml :: IOUtils -> Config -> Wish String String
export copyHtml = (ioUtils) => pipe(
  (c) => ioUtils.exec(`cp ${c.html.input} ${c.html.output}`),
  mapRej(.stderr),
  map(.stdout)
)

buildDocumentation :: IOUtils -> Config -> Wish String String
export buildDocumentation = (ioUtils, config) => pipe(
  buildBundle(ioUtils),
  chain((_) => buildSass(ioUtils, config)),
  chain((_) => copyHtml(ioUtils, config)),
  chain((_) => map(mconcat($, "/.docs"), ioUtils.getCurrentPath)),
  map((outputPath) => `Documentation built and available in the folder '${outputPath}'`)
)(config)

#endif
